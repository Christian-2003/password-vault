package de.passwordvault.view.authentication.activity_autofill_authentication;

import android.os.Bundle;
import android.service.autofill.Dataset;
import android.util.Log;

import androidx.biometric.BiometricManager;
import androidx.biometric.BiometricPrompt;
import androidx.core.content.ContextCompat;
import androidx.lifecycle.ViewModel;

import java.util.ArrayList;
import java.util.concurrent.Executor;
import de.passwordvault.App;
import de.passwordvault.R;
import de.passwordvault.model.security.login.Account;


/**
 * Class implements a view model for {@link AutofillAuthenticationActivity}.
 *
 * @author  Christian-2003
 * @version 3.5.0
 */
public class AutofillAuthenticationViewModel extends ViewModel {

    /**
     * Attribute stores the biometric prompt info.
     */
    private final BiometricPrompt.PromptInfo biometricPromptInfo;

    /**
     * Attribute stores whether biometric authentication is cancelled by the user.
     */
    private boolean biometricAuthenticationCancelled;

    /**
     * Attribute stores the executor for biometric authentication.
     */
    private final Executor executor;

    /**
     * Attribute store the datasets for which this activity authenticates.
     */
    private ArrayList<Dataset> datasets;


    /**
     * Constructor instantiates a new view model.
     */
    public AutofillAuthenticationViewModel() {
        BiometricPrompt.PromptInfo.Builder biometricPromptInfoBuilder = new BiometricPrompt.PromptInfo.Builder();
        biometricPromptInfoBuilder.setTitle(App.getContext().getString(R.string.autofill_authentication_biometrics_title));
        biometricPromptInfoBuilder.setNegativeButtonText(App.getContext().getString(R.string.button_cancel));
        biometricPromptInfo = biometricPromptInfoBuilder.build();

        biometricAuthenticationCancelled = false;
        executor = ContextCompat.getMainExecutor(App.getContext());
        datasets = null;
    }


    /**
     * Method returns the biometric prompt info.
     *
     * @return  Biometric prompt info.
     */
    public BiometricPrompt.PromptInfo getBiometricPromptInfo() {
        return biometricPromptInfo;
    }

    /**
     * Method returns whether biometric authentication is cancelled by the user.
     *
     * @return  Whether biometric authentication is cancelled.
     */
    public boolean isBiometricAuthenticationCancelled() {
        return biometricAuthenticationCancelled;
    }

    /**
     * Method changes whether biometric authentication is cancelled by the user.
     *
     * @param biometricAuthenticationCancelled  Whether biometric authentication is cancelled.
     */
    public void setBiometricAuthenticationCancelled(boolean biometricAuthenticationCancelled) {
        this.biometricAuthenticationCancelled = biometricAuthenticationCancelled;
    }

    /**
     * Method returns the executor used for biometric authentication.
     *
     * @return  Executor for biometric authentication.
     */
    public Executor getExecutor() {
        return executor;
    }

    /**
     * Method returns the list of datasets that were generated by the autofill service.
     *
     * @return  List of generated datasets.
     */
    public ArrayList<Dataset> getDatasets() {
        return datasets;
    }


    /**
     * Method parses the arguments that were passed to the activity.
     *
     * @param args  Arguments that need to be processed.
     */
    public void processArguments(Bundle args) {
        if (args == null || datasets != null) {
            return;
        }
        datasets = new ArrayList<>();
        if (args.containsKey(AutofillAuthenticationActivity.KEY_DATASETS)) {
            try {
                datasets = args.getParcelableArrayList(AutofillAuthenticationActivity.KEY_DATASETS);
            }
            catch (Exception e) {
                Log.d("AutofillService", "Could not parse arguments: " + e.getMessage());
            }
        }
    }


    /**
     * Method tests whether class 3 biometrics are available on the Android device.
     *
     * @return  Whether class 3 biometrics are available.
     */
    public boolean isBiometricsAvailable() {
        BiometricManager manager = BiometricManager.from(App.getContext());
        int result = manager.canAuthenticate(BiometricManager.Authenticators.BIOMETRIC_STRONG);
        return result == BiometricManager.BIOMETRIC_SUCCESS;
    }


    /**
     * Method tests whether the provided password is correct.
     *
     * @param s Password to be tested.
     * @return  Whether the password matches.
     */
    public boolean confirmPassword(String s) throws NullPointerException {
        return Account.getInstance().isPassword(s);
    }


    /**
     * Method tests whether the login shall be done using biometrics.
     *
     * @return  Whether the login shall be done using biometrics.
     */
    public boolean useBiometrics() {
        return Account.getInstance().useBiometrics() && isBiometricsAvailable();
    }

}
